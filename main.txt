<!DOCTYPE html>
<html lang="en">

<head>
    <title>인터렉션-glb-array</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <!-- <link type="text/css" rel="stylesheet" href="main.css"> -->
    <style>
        .webgl {
            border: 1px solid red;
        }
    </style>
</head>

<body>

    <div class="content line spot">
        <canvas class="webgl"></canvas>
    </div>



    <script type="importmap">
			{
				"imports": {
					"three": "../build/three.module.js",
					"three/addons/": "./jsm/"
				}
			}
		</script>

    <script type="module">
        import * as THREE from 'three';
        import Stats from 'three/addons/libs/stats.module.js';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { RoomEnvironment } from 'three/addons/environments/RoomEnvironment.js';
        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';


        //----< Canvas >--->
        const canvas = document.querySelector('canvas.webgl')


        //======화면 환경세팅 (카메라, 빛, 렌더링)

        //화면정의
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xffffff);

        //카메라설정
        // const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const fov = 75; //25에서 원금감이 작고 자연스러움
        const aspect = window.innerWidth / window.innerHeight; // the canvas default : 1,   sizes.width / sizes.height,
        const near = 0.1; //
        const far = 1000; // 작은 값 화면잘림
        const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);


        camera.position.z = 30;
        camera.position.x = 0;
        // 시야각확보
        //아이소메트릭 카메라로 변경
        // const frustumSize = 5; 
        // const aspect = window.innerWidth / window.innerHeight;
        // const camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, 1, 1000 );
        // camera.position.set(0,0,5)

        // OrbitControls 라이브러리
        const controls = new OrbitControls(camera, canvas)
        controls.target.set(0, .6, 0) // axes 위치조정
        controls.enableDamping = true
        controls.enableZoom = true;
        controls.autoRotate = false; // false


        //조명설정
        const ambientLight = new THREE.AmbientLight(0xffffff, 2) //0.1
        ambientLight.position.set(0.2, 0.2, 0.2)
        scene.add(ambientLight)

        const directionalLight = new THREE.DirectionalLight(0xffffff, 3) // 빛색 ,  강도 1 
        directionalLight.castShadow = true //그림자 활성화

        directionalLight.shadow.mapSize.width = 1024
        directionalLight.shadow.mapSize.height = 1024

        directionalLight.shadow.camera.near = 1
        directionalLight.shadow.camera.far = 6 //박스너비

        directionalLight.shadow.camera.top = 2
        directionalLight.shadow.camera.right = 2
        directionalLight.shadow.camera.bottom = - 2
        directionalLight.shadow.camera.left = - 2

        directionalLight.shadow.normalBias = 0.05 //그림자 적용시 주름 제거
        directionalLight.shadow.radius = 10

        directionalLight.position.set(3, 2, 2) // 직사광선 뱡향 위치 변경 (0, 4, 2)  (2, 2, 5) (5, 2, 2)
        scene.add(directionalLight)


        //====< 랜더링설정 > 리사이즈 설정========
        const sizes = {
            // width: window.innerWidth,
            width: 920,
            height: 900
            // width: window.innerWidth, height: window.innerHeight
        }


        //---< reSizes >--->
        window.addEventListener('resize', () => {
            // Update sizes
            // sizes.width = 
            sizes.width = window.innerWidth, //1220, window.innerWidth
                sizes.height = 702

            // Update camera
            camera.aspect = sizes.width / sizes.height
            camera.updateProjectionMatrix()

            // Update renderer
            renderer.setSize(sizes.width, sizes.height)
            renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
        })


        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);//renderer.setSize(sizes.width, sizes.height)
        // document.body.appendChild(renderer.domElement);
        renderer.shadowMap.type = THREE.PCFSoftShadowMap
        renderer.shadowMap.enabled = true;
        // renderer.setSize(sizes.width, sizes.height)
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
        // renderer.setClearColor(0 X7493CA, 0) //배경색 , alpha적용
        renderer.physicallyCorrectLights = true // 사실적인 빛 활성화
        renderer.outputEncoding = THREE.sRGBEncoding
        // environmentMap.encoding = THREE.sRGBEncoding


        //그림자 적용 함수
        const updateAllMaterials = () => {
            scene.traverse((child) => {
                if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {
                    // 최적화시 조건문을 추가해서 그림자 적용 오브젝트를 선별한다. FLOOR에는 receiveShadow만 적용함..
                    child.castShadow = true //그림자 적용
                    child.receiveShadow = true //그림자 적용
                    //child.material.envMap = environmentMap //환경 맵 배경 적용
                }
            })
        }


        //----<  axes 좌표표시  >--->
        const axesHelper = new THREE.AxesHelper()
        scene.add(axesHelper)


        //인터렉션 관련 오브젝트 선언
        const raycaster = new THREE.Raycaster();
        const pointer = new THREE.Vector2();
        let INTERSECTED;
        // let mm;


        //카드 박스지오메트리
        const geometry = new THREE.BoxGeometry(1, 1, 1);
        const material = new THREE.MeshBasicMaterial({ color: 0xada2f8 });
        const cube = new THREE.Mesh(geometry, material);
        cube.position.x = 100;
        cube.scale.y = 1.4;
        cube.scale.z = .04
        scene.add(cube);


        //glb가져오기
        var glbs, mm;
        const dracoLoader = new DRACOLoader();
        dracoLoader.setDecoderPath('jsm/libs/draco/gltf/');
        const loader = new GLTFLoader();
        loader.setDRACOLoader(dracoLoader);
        loader.load('static/models/onecard.glb', //coin01

            //정지화면 일때
            (gltf) => {
                glbs = gltf.scene;
                scene.add(glbs);
                // console.log( gltf.scene.children)
                // updateAllMaterials()

                for (let i = 0; i < 120; i++) {
                    mm = gltf.scene.clone();
                    //Math.random() * 80 - 40;
                    // mm.position.x = 1 * i;

                    // mm.position.x = Math.random() * i - (i*2) ;
                    // mm.position.y = Math.random() * 80 - (i*2) ;
                    
                    mm.position.x = Math.random() * 12 - 6;
                    mm.position.y = Math.random() * 12 - 6;
                    mm.position.z = Math.random() * 12 - 6;


                    mm.rotation.x = Math.random() * 2 * Math.PI;
					mm.rotation.y = Math.random() * 2 * Math.PI;
					mm.rotation.z = Math.random() * 2 * Math.PI;


                    // mm.scale.x = Math.random() + 0.5;
					// mm.scale.y = Math.random() + 0.5;
					// mm.scale.z = Math.random() + 0.5;


                    scene.add(mm);
                    
                }
                requestAnimationFrame(animate);
                console.log(mm);
            })


        window.addEventListener('click', function (e) {
            camera.position.z = 12;
            // glbb.rotation.y = glbb.rotation.y += 0.07
            // cube.rotation.x = cube.rotation.y = Math.PI;
            console.log(e);
            requestAnimationFrame(rtate)
        })


        function animate() {
            requestAnimationFrame(animate);
            render();
        }


        function render() {
            // cube.rotation.x = cube.rotation.y += 0.01
            // glbb.rotation.x = cube.rotation.ㅌ += 0.01
            // glbs.rotation.y = glbb.rotation.y += .1

            const timer = Date.now() * 0.0003;

			// camera.position.x = Math.sin( timer ) * 0.5;
			// camera.position.z = Math.cos( timer ) * 0.5;
            //camera.position.x = Math.sin() * 0.5;
			//camera.position.z += Math.cos(timer);
			// camera.lookAt( 0, 0.1, 0 );
            //console.log(Zz)

			// renderer.render( scene, camera );
            renderer.render(scene, camera);
        }

        function rtate() {
            glbs.rotation.y = glbs.rotation.y += 180
        }


    </script>

</body>

</html>



https://github.com/mrdoob/three.js/issues/22598

https://codesandbox.io/s/threejs-transparency-r132-1hs0v
