<!DOCTYPE html>
<html lang="en">

<head>
    <title>인터렉션-glb</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <!-- <link type="text/css" rel="stylesheet" href="main.css"> -->
    <style>

    </style>
</head>

<body>


    <script type="importmap">
			{
				"imports": {
					"three": "../build/three.module.js",
					"three/addons/": "./jsm/"
				}
			}
		</script>

    <script type="module">
        import * as THREE from 'three';
        import Stats from 'three/addons/libs/stats.module.js';

        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { RoomEnvironment } from 'three/addons/environments/RoomEnvironment.js';

        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { DRACOLoader } from 'three/addons/loaders/DRACOLoader.js';


//----< Canvas >--->
const canvas = document.querySelector('canvas.webgl')


        //======화면 환경세팅 (카메라, 빛, 렌더링)
        
        //화면정의
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xffffff);

        //카메라설정
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 2;
        camera.position.x = 0;


        //조명설정
        const ambientLight = new THREE.AmbientLight(0xffffff, 2) //0.1
        ambientLight.position.set(0.2, 0.2, 0.2)
        scene.add(ambientLight)
    
        const directionalLight = new THREE.DirectionalLight(0xffffff, 3) // 빛색 ,  강도 1 
        directionalLight.castShadow = true //그림자 활성화

        directionalLight.shadow.mapSize.width = 1024
        directionalLight.shadow.mapSize.height = 1024

        directionalLight.shadow.camera.near = 1
        directionalLight.shadow.camera.far = 6 //박스너비

        directionalLight.shadow.camera.top = 2
        directionalLight.shadow.camera.right = 2
        directionalLight.shadow.camera.bottom = - 2
        directionalLight.shadow.camera.left = - 2

        directionalLight.shadow.normalBias = 0.05 //그림자 적용시 주름 제거
        directionalLight.shadow.radius = 10

        directionalLight.position.set(3, 2, 2) // 직사광선 뱡향 위치 변경 (0, 4, 2)  (2, 2, 5) (5, 2, 2)
        scene.add(directionalLight)


        //랜더링설정
        const renderer = new THREE.WebGLRenderer({antialias: true});
        renderer.setSize(window.innerWidth, window.innerHeight);//renderer.setSize(sizes.width, sizes.height)
        document.body.appendChild(renderer.domElement);
        renderer.shadowMap.type = THREE.PCFSoftShadowMap
        renderer.shadowMap.enabled = true
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))
        // renderer.setClearColor(0 X7493CA, 0) //배경색 , alpha적용
        renderer.physicallyCorrectLights = true // 사실적인 빛 활성화
        renderer.outputEncoding = THREE.sRGBEncoding
        // environmentMap.encoding = THREE.sRGBEncoding



        //그림자 적용 함수
        const updateAllMaterials = () => {
            scene.traverse((child) => {
                if (child instanceof THREE.Mesh && child.material instanceof THREE.MeshStandardMaterial) {

                // 최적화시 조건문을 추가해서 그림자 적용 오브젝트를 선별한다. FLOOR에는 receiveShadow만 적용함..
                child.castShadow = true //그림자 적용
                child.receiveShadow = true //그림자 적용
                //child.material.envMap = environmentMap //환경 맵 배경 적용
                
                }
            })
        }


        //----<  axes 좌표표시  >--->
        const axesHelper = new THREE.AxesHelper()
        scene.add(axesHelper)



        //인터렉션 관련 오브젝트 선언
        const raycaster = new THREE.Raycaster();
        const pointer = new THREE.Vector2();
        let INTERSECTED;




        //카드 박스지오메트리
        const geometry = new THREE.BoxGeometry(1, 1, 1);
        const material = new THREE.MeshBasicMaterial({ color: 0xada2f8 });
        const cube = new THREE.Mesh(geometry, material);
        cube.position.x = 100;
        cube.scale.y = 1.4;
        cube.scale.z = .04
        scene.add(cube);



        //glb가져오기
        var glbb;
        const dracoLoader = new DRACOLoader();
		dracoLoader.setDecoderPath( 'jsm/libs/draco/gltf/' );
        const loader = new GLTFLoader();
        loader.setDRACOLoader( dracoLoader );
        loader.load('static/models/CashBack-uv1.glb', //coin01

            //정지화면 일때
            (gltf) => {
                glbb = gltf.scene;
                scene.add( glbb);
                console.log( gltf.scene.children)
                updateAllMaterials()
            })
            animate();


        window.addEventListener('click', function (e) {
            camera.position.z = 3;
            
            // glbb.rotation.y = glbb.rotation.y += 0.07
            // cube.rotation.x = cube.rotation.y = Math.PI;
            console.log(e);
            requestAnimationFrame(rtate)
        })



        function animate() {
            requestAnimationFrame(animate);
            render();
        }
     
       

        function render() {
            // cube.rotation.x = cube.rotation.y += 0.01
            // glbb.rotation.x = cube.rotation.ㅌ += 0.01
           
            renderer.render(scene, camera);
        }


        function rtate(){
            glbb.rotation.y = glbb.rotation.y += 180
        }


    </script>

</body>

</html>
